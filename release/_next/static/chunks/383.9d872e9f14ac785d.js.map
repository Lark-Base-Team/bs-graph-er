{"version":3,"file":"static/chunks/383.9d872e9f14ac785d.js","mappings":"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","sources":["webpack://_N_E/./utils/layout.ts","webpack://_N_E/./components/KVList.tsx","webpack://_N_E/./components/LayoutFlow.tsx","webpack://_N_E/./views/Home/trans.tsx","webpack://_N_E/./views/Home/index.tsx","webpack://_N_E/./views/Home/index.module.css","webpack://_N_E/<anon>"],"sourcesContent":["import Dagre from \"@dagrejs/dagre\";\n\nconst g = new Dagre.graphlib.Graph().setDefaultEdgeLabel(() => ({}));\n\nexport const getLayoutedElements = (\n  nodes: any[],\n  edges: any[],\n  options: { direction: any }\n) => {\n  g.setGraph({\n    rankdir: options.direction,\n  });\n\n  const els = document.querySelectorAll(\".kvlist-node\");\n\n  const elMap: any = Array.from(els).reduce((acc, el) => {\n    const id = el.id;\n\n    return { ...acc, [id]: el.clientHeight };\n  }, {});\n\n  edges.forEach(\n    (edge: {\n      source: Dagre.Edge;\n      target: string | { [key: string]: any } | undefined;\n    }) => g.setEdge(edge.source, edge.target)\n  );\n  nodes.forEach((node: any) =>\n    g.setNode(\n      node.id,\n      Object.assign(node, { width: 400, height: elMap[node.id] || 100 })\n    )\n  );\n\n  Dagre.layout(g);\n\n  return {\n    nodes: nodes.map((node: { id: string | Dagre.Label }) => {\n      const { x, y } = g.node(node.id);\n\n      return { ...node, position: { x, y } };\n    }),\n    edges,\n  };\n};\n","import { Card, Form, List, Select } from \"@douyinfe/semi-ui\";\nimport { FieldType } from \"@lark-base-open/js-sdk\";\nimport { Handle, Position } from \"reactflow\";\n\nexport function KVList(props: any) {\n  return (\n    <div className=\"kvlist-node\" id={props.id}>\n      <Card\n        style={{ background: \"#fff\" }}\n        headerStyle={{ paddingTop: 15, paddingBottom: 15 }}\n        bodyStyle={{ paddingTop: 0, paddingBottom: 0 }}\n        title={\n          <h1>\n            {!props.data.start && (\n              <Handle\n                type=\"target\"\n                position={Position.Left}\n                style={{ top: 30 }}\n              />\n            )}\n            {props.data.label}\n          </h1>\n        }\n      >\n        <Form\n          labelPosition=\"left\"\n          labelAlign=\"right\"\n          initValues={formatValues(props.data.data)}\n          onClickCapture={(e) => {\n            e.stopPropagation();\n          }}\n        >\n          {props.data.fields.map((item: any, i: number) => {\n            return (\n              <div key={item.id}>\n                <Form.Input\n                  field={item.id}\n                  label={item.label}\n                  readonly\n                  trigger=\"blur\"\n                  style={{ width: 200 }}\n                />\n                {(item.type === FieldType.SingleLink ||\n                  item.type === FieldType.DuplexLink) && (\n                  <Handle\n                    id={item.id}\n                    type=\"source\"\n                    style={{ top: i * 56 + 52 + 29 }}\n                    position={Position.Right}\n                  />\n                )}\n              </div>\n            );\n          })}\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nfunction mapCb(map: any, key: string, cb: any) {\n  return map?.[key]?.() ?? cb();\n}\n\nfunction formatValues(data: any[] = []) {\n  // const fieldMap = formatFieldsMap(fields);\n  const r = data.reduce((acc, c) => {\n    // const field = fieldMap[c.field];\n    // if (field.type === FieldType.Text) {\n    //   acc[c.field] = c.value?.[0]?.text;\n    // } else if (field.type === FieldType.MultiSelect) {\n    //   acc[c.field] = c.value?.map((item: any) => item.id) ?? [];\n    // } else if (field.type === FieldType.DateTime) {\n    //   acc[c.field] = c.value;\n    // } else {\n    //   const cell = c.value;\n    //   acc[c.field] =\n    //     typeof c === \"object\"\n    //       ? cell?.text ??\n    //         cell\n    //           ?.map?.((item: any) => item.text ?? item.name ?? item.label)\n    //           .join(\",\")\n    //       : cell;\n    // }\n    acc[c.field] = c.value;\n    return acc;\n  }, {});\n  // console.log({ r });\n\n  return r;\n}\n\nfunction formatFieldsMap(fields: any[] = []) {\n  return fields.reduce((acc, c) => {\n    acc[c.id] = c;\n    return acc;\n  }, {});\n}\n","import { Button, Toast } from \"@douyinfe/semi-ui\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport styles from \"./index.module.css\";\nimport { useTranslation } from \"next-i18next\";\n\nimport ReactFlow, {\n  Background,\n  BackgroundVariant,\n  ControlButton,\n  Controls,\n  MiniMap,\n  NodeResizer,\n  NodeToolbar,\n  ReactFlowProvider,\n  addEdge,\n  useEdgesState,\n  useNodesState,\n  useReactFlow,\n} from \"reactflow\";\n\nimport \"reactflow/dist/style.css\";\nimport { getLayoutedElements } from \"@/utils/layout\";\nimport { KVList } from \"./KVList\";\nimport { IconExpand } from \"@douyinfe/semi-icons\";\n\nconst nodeTypes = {\n  kvlist: KVList,\n};\n\nexport const LayoutFlow = ({\n  initialNodes = [],\n  initialEdges = [],\n  fullscreen = false,\n}) => {\n  const { fitView } = useReactFlow();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onLayout = useCallback(() => {\n    const { nodes: layoutedNodes, edges: layoutedEdges } = getLayoutedElements(\n      nodes,\n      edges,\n      {\n        direction: \"LR\",\n      }\n    );\n\n    console.log(layoutedNodes, layoutedEdges);\n\n    setNodes([...(layoutedNodes as any)]);\n    setEdges([...layoutedEdges]);\n\n    window.requestAnimationFrame(() => {\n      fitView();\n    });\n  }, [nodes, edges]);\n\n  const onConnect = useCallback(\n    (params: any) => setEdges((eds: any) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  const onInit = useCallback(\n    (t: any) => {\n      onLayout();\n      setTimeout(() => {\n        t.fitView({ maxZoom: 0.9 });\n      });\n    },\n    [onLayout]\n  );\n\n  const expand = useCallback(() => {\n    const nw = open(\"/\", \"_block\");\n    if (nw) {\n      (nw as any).options = () => ({\n        initialEdges,\n        initialNodes,\n        fullscreen: true,\n      });\n    }\n  }, [initialEdges, initialNodes]);\n\n  return (\n    <ReactFlow\n      nodeTypes={nodeTypes}\n      attributionPosition=\"bottom-left\"\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      onInit={onInit}\n      minZoom={0.1}\n    >\n      <Controls>\n        {!fullscreen && (\n          <ControlButton onClick={() => expand()}>\n            <IconExpand />\n          </ControlButton>\n        )}\n      </Controls>\n      {fullscreen && <MiniMap />}\n      <NodeToolbar />\n      {/* <NodeResizer /> */}\n      <Background variant={BackgroundVariant.Dots} gap={12} size={1} />\n    </ReactFlow>\n  );\n};\n","import { FieldType } from \"@lark-base-open/js-sdk\";\n\nexport function trans(tables = []) {\n  const nodes = [];\n  const edges = [];\n  let isLoop = false;\n  for (let i = 0; i < tables.length; i++) {\n    const table = tables[i] as any;\n    const node = {\n      id: table.id,\n      type: \"kvlist\",\n      position: { x: 0, y: 0 },\n      data: {\n        start: i === 0,\n        end: i === tables.length - 1,\n        label: table.label,\n        fields: table.fields,\n        data: table.data,\n      },\n      // sourcePosition: \"right\",\n      // targetPosition: \"left\",\n    };\n    nodes.push(node);\n    for (let j = 0; j < table.fields.length; j++) {\n      const field = table.fields[j];\n      // const d = table.data[j];\n      if (\n        field.type === FieldType.SingleLink ||\n        field.type === FieldType.DuplexLink\n      ) {\n        // for (let i = 0; i < d.value.length; i++) {\n        const id = field.property.tableId; //d.value[i];\n        const edge = {\n          id: table.id + \"-\" + field.id + \"-\" + id,\n          sourceHandle: field.id,\n          source: table.id,\n          target: id,\n        };\n        if (nodes[0].id === edge.target) {\n          isLoop = true;\n          edges.push({\n            id: \"root-ref-edge\" + edge.id + \"-\" + edge.source,\n            sourceHandle: edge.sourceHandle,\n            source: edge.source,\n            target: \"root-ref\",\n          });\n        } else {\n          edges.push(edge);\n        }\n        // }\n      }\n    }\n  }\n\n  if (isLoop) {\n    nodes.push({\n      id: \"root-ref\",\n      type: \"output\",\n      position: { x: 0, y: 0 },\n      height: 200,\n      data: { label: `Ref<${nodes[0].data.label}>` },\n      targetPosition: \"left\",\n    });\n  }\n\n  return [nodes, edges];\n}\n","import { Button, Empty, Spin, Toast } from \"@douyinfe/semi-ui\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport styles from \"./index.module.css\";\nimport { useTranslation } from \"next-i18next\";\nimport { Node, ReactFlowProvider } from \"reactflow\";\nimport { LayoutFlow } from \"@/components/LayoutFlow\";\nimport { trans } from \"./trans\";\n\nimport { FieldType, ITable, bitable } from \"@lark-base-open/js-sdk\";\nimport mitt from \"mitt\";\nimport {\n  IllustrationNoResult,\n  IllustrationNoResultDark,\n} from \"@douyinfe/semi-illustrations\";\n\nconst options = ((window as any)?.options?.() as any) || {};\n\n// const bs: { table?: ITable } = {};\nconst emitter = mitt();\n\nasync function fetchTables() {\n  // const table = await bitable.base.getActiveTable();\n  // bs.table = table;\n  // const fieldList = await table.getFieldList();\n  const tableList = await bitable.base.getTableList();\n  return await bsTableTrans(tableList);\n}\n\nif (!options.fullscreen) {\n  bitable.base.onSelectionChange(async (e) => {\n    emitter.emit(\"change-record\", e);\n    // console.log(record);\n  });\n}\n\nasync function bsTableTrans(bsTableList: ITable[]) {\n  const tables = [];\n\n  for (let i = 0; i < bsTableList.length; i++) {\n    const bsTable = bsTableList[i];\n    const name = await bsTable.getName();\n    const fields = await bsTable\n      .getFieldList()\n      .then((list) => Promise.all(list.map((item) => item.getMeta())));\n    const primary = fields.find((item) => item.isPrimary);\n    tables.push({\n      id: bsTable.id,\n      label: name,\n      primary: primary?.id,\n      meta: bsTable,\n      fields: fields.map((item) => ({\n        id: item.id,\n        label: item.name,\n        type: item.type,\n        property: item.property,\n        meta: item,\n      })),\n      data: fields.map((item) => ({\n        field: item.id,\n        value: FieldType[item.type],\n      })),\n    });\n  }\n\n  return tables;\n}\n\nasync function deepGet(recordId: any, tableId: any, dep: any = {}) {\n  if (dep[recordId + tableId]) {\n    return dep[recordId + tableId];\n  }\n  const table = await bitable.base.getTable(tableId);\n  const fields = await table.getFieldMetaList();\n  const record = await table.getRecordById(recordId);\n  const result: any = {\n    id: tableId,\n    recordId,\n    label: await table.getName(),\n    fields: fields.map((item) => ({\n      id: item.id,\n      label: item.name,\n      type: item.type,\n      property: item.property,\n      meta: item,\n    })),\n    data: [],\n  };\n\n  dep[recordId + tableId] = result;\n\n  result.data = await Promise.all(\n    fields.map(async (item) => {\n      const value = record.fields[item.id] as any;\n      return {\n        field: item.id,\n        value:\n          item.type === FieldType.SingleLink ||\n          item.type === FieldType.DuplexLink\n            ? await Promise.all(\n                value?.recordIds.map((rid: any) =>\n                  deepGet(rid, value.tableId, dep)\n                ) ?? []\n              )\n            : value,\n      };\n    })\n  );\n\n  return result;\n}\n\n/**\n * deep table => [nodes, edges]\n * @param table deepGet() return\n */\nfunction deepTrans(\n  table: any,\n  nodes: any = [],\n  edges: any = [],\n  nodeDep: any = {},\n  edgeDep: any = {}\n) {\n  const node = {\n    id: table.recordId,\n    type: \"kvlist\",\n    position: { x: 0, y: 0 },\n    data: {\n      start: false,\n      end: false,\n      label: table.label,\n      fields: table.fields,\n      data: table.data,\n    },\n  };\n  if (!nodeDep[node.id]) {\n    nodes.push(node);\n    nodeDep[node.id] = true;\n  }\n\n  for (let i = 0; i < table.fields.length; i++) {\n    const field = table.fields[i];\n    if (\n      field.type !== FieldType.SingleLink &&\n      field.type !== FieldType.DuplexLink\n    )\n      continue;\n    const value = table.data[i].value;\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i];\n      const eid = table.recordId + \"-\" + v.recordId;\n      if (edgeDep[eid]) continue;\n      edgeDep[eid] = true;\n      edges.push({\n        id: eid,\n        sourceHandle: field.id,\n        source: table.recordId,\n        target: v.recordId,\n      } as any);\n      deepTrans(v, nodes, edges, nodeDep, edgeDep);\n    }\n  }\n\n  return [nodes, edges];\n}\n\nexport default function Home() {\n  const [t] = useTranslation();\n  const [graph, setGraph] = useState<any>({});\n  const [loading, setLoading] = useState(true);\n  const [deno, setDeno] = useState(false);\n  const [select, setSelect] = useState(true);\n  useEffect(() => {\n    if (options.fullscreen) {\n      setSelect(true);\n      setLoading(true);\n      setGraph(options);\n      setLoading(false);\n      return;\n    }\n    fetchTables().then((tables) => {\n      setLoading(true);\n      setDeno(false);\n      console.log({ tables });\n      const [initialNodes, initialEdges] = trans(tables as any);\n      console.log({ initialNodes, initialEdges });\n      setGraph({ initialNodes, initialEdges });\n      setDeno(true);\n      setTimeout(() => {\n        setLoading(false);\n      }, 100);\n    });\n\n    // emitter.on(\"change-record\", async (e: any) => {\n    //   // const tables = await p;\n\n    //   // console.log(tables);\n    //   setSelect(true);\n    //   setLoading(true);\n    //   console.log(e);\n    //   const t = await deepGet(e.data.recordId, e.data.tableId);\n    //   console.log(t);\n    //   const g = deepTrans(t);\n    //   console.log(g);\n    //   setGraph({ initialNodes: g[0], initialEdges: g[1] });\n    //   setLoading(false);\n    // });\n    return () => {\n      // emitter.off(\"change-record\");\n    };\n  }, []);\n  return (\n    <main\n      className={styles.main}\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      {!select ? (\n        <Empty\n          image={<IllustrationNoResult style={{ width: 150, height: 150 }} />}\n          darkModeImage={\n            <IllustrationNoResultDark style={{ width: 150, height: 150 }} />\n          }\n          description={t(\"empty-tip\")}\n        />\n      ) : (\n        deno && (\n          <ReactFlowProvider>\n            <LayoutFlow {...graph} />\n          </ReactFlowProvider>\n        )\n      )}\n      {loading && (\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100vh\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            background: \"#fff\",\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            zIndex: 100,\n          }}\n        >\n          <Spin size=\"large\"></Spin>\n        </div>\n      )}\n    </main>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Home_main__ElU3j\",\"h4\":\"Home_h4__4GCIr\",\"code\":\"Home_code__ESbU9\"};"],"names":["_window_options","window","g","Dagre","Graph","setDefaultEdgeLabel","getLayoutedElements","nodes","edges","options","setGraph","rankdir","direction","els","document","querySelectorAll","elMap","Array","from","reduce","acc","el","id","clientHeight","forEach","setEdge","edge","source","target","setNode","node","Object","assign","width","height","map","x","y","position","KVList","props","jsx_runtime","jsx","div","className","Card","style","background","headerStyle","paddingTop","paddingBottom","bodyStyle","title","jsxs","h1","data","start","Handle","type","Position","Left","top","label","Form","labelPosition","labelAlign","initValues","formatValues","onClickCapture","e","stopPropagation","fields","item","i","Input","field","readonly","trigger","FieldType","SingleLink","DuplexLink","Right","r","c","value","nodeTypes","kvlist","LayoutFlow","initialNodes","initialEdges","fullscreen","param","fitView","useReactFlow","setNodes","onNodesChange","useNodesState","setEdges","onEdgesChange","useEdgesState","onLayout","useCallback","layoutedNodes","layoutedEdges","console","log","requestAnimationFrame","onConnect","addEdge","params","eds","onInit","setTimeout","t","maxZoom","expand","nw","open","ReactFlow","attributionPosition","minZoom","Controls","ControlButton","onClick","IconExpand","MiniMap","NodeToolbar","Background","variant","BackgroundVariant","Dots","gap","size","trans","tables","isLoop","length","table","end","push","j","property","tableId","sourceHandle","concat","targetPosition","_window","call","emitter","mitt","fetchTables","tableList","bitable","base","getTableList","bsTableTrans","bsTableList","bsTable","name","getName","getFieldList","then","Promise","all","list","getMeta","primary","find","isPrimary","meta","Home","useTranslation","graph","useState","loading","setLoading","deno","setDeno","select","setSelect","useEffect","main","styles","display","justifyContent","alignItems","ReactFlowProvider","Empty","image","IllustrationNoResult","darkModeImage","IllustrationNoResultDark","description","left","zIndex","Spin","onSelectionChange","emit","module","exports"],"sourceRoot":""}